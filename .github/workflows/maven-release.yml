name: Publish SDK to the Maven Central Repository
on:
  workflow_dispatch:
jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - id: install-gpg-key
        name: Install GPG secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
      - name: Configure Git user
        run: |
          git config user.email "tuvshinbayar.davaa@telqtele.com"
          git config user.name "tuvshuud"
      - name: Prepare the release
        run: |
          mvn \
            --no-transfer-progress \
            --batch-mode \
            -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} \
            clean package release:prepare
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          branch: ${{ github.ref }}
      - name: Set up Maven Central Repository
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Publish to Maven central
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        run: |
          mvn \
            --no-transfer-progress \
            --batch-mode \
            -DskipTests \
            -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} \
            release:perform

  sdk-integration-test:
        runs-on: ubuntu-latest
        needs: publish
        steps:
          - name: Checkout SDK
            uses: actions/checkout@v4

          - name: Get SDK version from pom.xml
            id: get-version
            run: |
              VERSION=$(grep -m1 '<version>' pom.xml | sed -E 's/.*<version>([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
              echo "version=$VERSION" >> "$GITHUB_OUTPUT"

          - name: Authenticate with AWS ECR
            uses: aws-actions/configure-aws-credentials@v2
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: eu-central-1

          - name: Login to Amazon ECR
            uses: aws-actions/amazon-ecr-login@v1

          - name: Pull sdk-test Docker image
            run: docker pull 789140966122.dkr.ecr.eu-central-1.amazonaws.com/sdk-test:latest

          - name: Run sdk-test Maven tests inside Docker
            run: |
              docker run --rm \
                -e appKey="${{ secrets.APP_KEY }}" \
                -e appId="${{ vars.APP_ID }}" \
                -e userId="${{ vars.USER_ID }}" \
                -e supplierId="${{ vars.SUPPLIER_ID }}" \
                -v "$HOME/.m2:/root/.m2" \
                789140966122.dkr.ecr.eu-central-1.amazonaws.com/sdk-test:latest \
                mvn test -Dsdk.version="${{ steps.get-version.outputs.version }}"